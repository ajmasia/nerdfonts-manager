#!/usr/bin/env bash
set -u

GITHUB_USER="ajmasia"
VERSION="1.3.0"

# -------------------- Resolve lib path --------------------
SELF_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]:-$0}")" && pwd)"

if [ -f "$SELF_DIR/lib/utils.sh" ]; then
  # Dev mode (ejecutando desde repo clonado)
  . "$SELF_DIR/lib/utils.sh"
else
  # Installed mode
  . "/usr/local/share/nfm/lib/utils.sh"
fi

script_name="$(basename -- "${BASH_SOURCE[0]:-$0}")"

# -------------------- Config --------------------
fzf_args=(
  --multi
  --header=$'üìù Nerd Font Manager\n[Tab] select multiple, [Enter] confirm'
)

# Prefer XDG fonts dir; fall back to ~/.fonts if it exists (back-compat)
_fonts_default() {
  if [ -d "$HOME/.fonts" ]; then
    printf '%s' "$HOME/.fonts"
  else
    printf '%s' "${XDG_DATA_HOME:-$HOME/.local/share}/fonts"
  fi
}

fonts_dir="${NERDFONTS_DIR:-$(_fonts_default)}"

available_fonts=(
  "0xProto" "3270" "AdwaitaMono" "Agave" "AnonymousPro" "Arimo"
  "AtkinsonHyperlegibleMono" "AurulentSansMono" "BigBlueTerminal"
  "BitstreamVeraSansMono" "IBMPlexMono" "CascadiaMono" "CascadiaCode"
  "CodeNewRoman" "ComicShannsMono" "CommitMono" "Cousine" "D2Coding"
  "DaddyTimeMono" "DejaVuSansMono" "DepartureMono" "DroidSansMono"
  "EnvyCodeR" "FantasqueSansMono" "FiraCode" "FiraMono" "GeistMono"
  "Go-Mono" "Gohu" "Hack" "Hasklig" "HeavyData" "Hermit" "iA-Writer"
  "Inconsolata" "InconsolataGo" "InconsolataLGC" "IntelOneMono"
  "Iosevka" "IosevkaTerm" "IosevkaTermSlab" "JetBrainsMono" "Lekton"
  "LiberationMono" "Lilex" "MartianMono" "Meslo" "Monaspace" "Monofur"
  "Monoid" "Mononoki" "MPlus" "Noto" "OpenDyslexic" "Overpass"
  "ProFont" "ProggyClean" "Recursive" "RobotoMono" "ShureTechMono"
  "SauceCodePro" "SpaceMono" "NerdFontsSymbolsOnly" "Terminus" "Tinos"
  "Ubuntu" "UbuntuMono" "UbuntuSans" "VictorMono" "ZedMono"
)

# -------------------- Distro/Nix detection & install help --------------------
_have() { command -v "$1" >/dev/null 2>&1; }

_detect_pkg_targets() {
  DETECTED="unknown"
  HAS_NIX=0
  if command -v nix >/dev/null 2>&1; then HAS_NIX=1; fi
  if [ -r /etc/os-release ]; then . /etc/os-release; fi
  local id="${ID:-}" like="${ID_LIKE:-}"
  if command -v pacman >/dev/null 2>&1 || [[ "$id" =~ (arch|artix) || "$like" =~ arch ]]; then
    DETECTED="arch"
  elif command -v dnf >/dev/null 2>&1 || [[ "$id" =~ fedora || "$like" =~ (fedora|rhel|centos) ]]; then
    DETECTED="fedora"
  elif command -v apt >/dev/null 2>&1 || command -v apt-get >/dev/null 2>&1 ||
    [[ "$id" =~ (debian|ubuntu|linuxmint|pop) || "$like" =~ (debian|ubuntu) ]]; then
    DETECTED="debian"
  elif [[ "$id" = "nixos" ]]; then
    DETECTED="nixos"
  fi
}

_join_unique() {
  declare -A seen=()
  local out=() x
  for x in "$@"; do
    [[ -n "$x" && -z "${seen[$x]:-}" ]] && {
      out+=("$x")
      seen["$x"]=1
    }
  done
  printf '%s' "${out[*]}"
}

_print_install_help() {
  # args: missing deps (e.g., fzf unzip fc-cache curl|wget)
  local missing=("$@")
  local apt_pkgs=() dnf_pkgs=() pac_pkgs=() nix_attrs=()

  for m in "${missing[@]}"; do
    case "$m" in
    fzf)
      apt_pkgs+=("fzf")
      dnf_pkgs+=("fzf")
      pac_pkgs+=("fzf")
      nix_attrs+=("fzf")
      ;;
    unzip)
      apt_pkgs+=("unzip")
      dnf_pkgs+=("unzip")
      pac_pkgs+=("unzip")
      nix_attrs+=("unzip")
      ;;
    fc-cache)
      apt_pkgs+=("fontconfig")
      dnf_pkgs+=("fontconfig")
      pac_pkgs+=("fontconfig")
      nix_attrs+=("fontconfig")
      ;;
    curl\|wget | curl | wget)
      apt_pkgs+=("curl" "wget")
      dnf_pkgs+=("curl" "wget")
      pac_pkgs+=("curl" "wget")
      nix_attrs+=("curl" "wget")
      ;;
    *)
      apt_pkgs+=("$m")
      dnf_pkgs+=("$m")
      pac_pkgs+=("$m")
      nix_attrs+=("$m")
      ;;
    esac
  done

  local apt_line dnf_line pac_line nix_line
  apt_line="$(_join_unique "${apt_pkgs[@]}")"
  dnf_line="$(_join_unique "${dnf_pkgs[@]}")"
  pac_line="$(_join_unique "${pac_pkgs[@]}")"
  nix_line="$(_join_unique "${nix_attrs[@]}")"

  local nix_refs=() a
  for a in $nix_line; do nix_refs+=("nixpkgs#$a"); done

  _detect_pkg_targets

  printf '%s\n' "${RED}${BOLD}Missing dependencies:${RESET} ${missing[*]}" >&2
  echo >&2

  if [ "$HAS_NIX" -eq 1 ] || [ "$DETECTED" = "nixos" ]; then
    printf '%s\n' "${BOLD}Nix/NixOS${RESET} ${DIM}(detected)${RESET}:" >&2
    printf '  %b\n' "${GREEN}nix profile install ${nix_refs[*]}${RESET}" >&2
    echo >&2
  fi

  case "$DETECTED" in
  debian)
    printf '%s\n' "${BOLD}Debian/Ubuntu${RESET} ${DIM}(detected)${RESET}:" >&2
    printf '  %b\n' "${GREEN}sudo apt update && sudo apt install -y ${apt_line}${RESET}" >&2
    ;;
  fedora)
    printf '%s\n' "${BOLD}Fedora${RESET} ${DIM}(detected)${RESET}:" >&2
    printf '  %b\n' "${GREEN}sudo dnf install -y ${dnf_line}${RESET}" >&2
    ;;
  arch)
    printf '%s\n' "${BOLD}Arch Linux${RESET} ${DIM}(detected)${RESET}:" >&2
    printf '  %b\n' "${GREEN}sudo pacman -Syu --needed ${pac_line}${RESET}" >&2
    ;;
  nixos)
    # Nix install line already shown above
    :
    ;;
  *)
    printf '%s\n' "${BOLD}Debian/Ubuntu${RESET}:" >&2
    printf '  %b\n' "${GREEN}sudo apt update && sudo apt install -y ${apt_line}${RESET}" >&2
    echo >&2
    printf '%s\n' "${BOLD}Fedora${RESET}:" >&2
    printf '  %b\n' "${GREEN}sudo dnf install -y ${dnf_line}${RESET}" >&2
    echo >&2
    printf '%s\n' "${BOLD}Arch Linux${RESET}:" >&2
    printf '  %b\n' "${GREEN}sudo pacman -Syu --needed ${pac_line}${RESET}" >&2
    ;;
  esac

  if printf '%s\n' "${missing[@]}" | grep -q 'curl|wget'; then
    echo >&2
    printf '%s\n' "${DIM}Note: you only need one of 'curl' or 'wget'.${RESET}" >&2
  fi
}

preflight_check() {
  # Always check once at startup, regardless of subcommand
  local required=(fzf unzip fc-cache curl\|wget)
  local missing=()
  for dep in "${required[@]}"; do
    case "$dep" in
    curl\|wget) (_have curl || _have wget) || missing+=("curl|wget") ;;
    *) _have "$dep" || missing+=("$dep") ;;
    esac
  done
  if ((${#missing[@]})); then
    _print_install_help "${missing[@]}"
    exit 1
  fi
}

# -------------------- Downloader (no eval) --------------------
set_downloader() {
  if command -v curl >/dev/null 2>&1; then
    # -f fail on HTTP errors, -S show error, -s silent, -L follow redirects
    downloader() { curl -fsSL "$1" -o "$2"; }
  elif command -v wget >/dev/null 2>&1; then
    downloader() { wget -qO "$2" "$1"; }
  else
    die "No downloader found (curl/wget)."
  fi
}

# -------------------- Help --------------------
help_global() {
  cat <<EOF
${BOLD}${CYAN}Nerd Font Manager (nfm)${RESET} v$VERSION

${BOLD}Usage${RESET}:
  $script_name ${GREEN}<command>${RESET} [args]  ${DIM}(use -h for command help)${RESET}

${BOLD}Commands${RESET}:
  ${GREEN}list, l${RESET}                 List installed fonts
  ${GREEN}install, i${RESET} [FONT...]    Install fonts (interactive if none)
  ${GREEN}uninstall, u${RESET} [FONT...]  Uninstall fonts (interactive if none)

${BOLD}Global options${RESET}:
  ${GREEN}-h, --help${RESET}              Show this help
  ${GREEN}-v, --version${RESET}           Show version

${BOLD}Notes${RESET}:
  ‚Ä¢ Fonts directory: \$NERDFONTS_DIR ${DIM}(default: ${HOME}/.local/share/fonts, or ~/.fonts if present)${RESET}
  ‚Ä¢ Downloads from official site: ${DIM}https://www.nerdfonts.com/font-downloads${RESET}

${BOLD}Uninstall${RESET}:
  To remove Nerd Font Manager from your system, run:
    ${DIM}curl -fsSL https://raw.githubusercontent.com/$GITHUB_USER/nerdfonts-manager/main/uninstall.sh | bash${RESET}

EOF
}

help_list() {
  cat <<EOF
${BOLD}${CYAN}Nerd Font Manager (nfm)${RESET}

${BOLD}Usage${RESET}: $script_name list
${DIM}List installed Nerd Fonts from $fonts_dir.${RESET}

EOF
}

help_install() {
  cat <<EOF
${BOLD}${CYAN}Nerd Font Manager (nfm)${RESET}

${BOLD}Usage${RESET}: $script_name install [FONT...]
Install one or more Nerd Fonts. If no FONT names are provided, an interactive fzf picker opens.

${BOLD}Examples${RESET}:
  ${GREEN}$script_name install                    ${RESET}Open fzf and select fonts
  ${GREEN}$script_name install ${RESET}FiraCode Meslo     Install specific fonts

EOF
}

help_uninstall() {
  cat <<EOF
${BOLD}${CYAN}Nerd Font Manager (nfm)${RESET}

${BOLD}Usage${RESET}: $script_name uninstall [FONT...]
Uninstall one or more Nerd Fonts. If no names are provided, an interactive fzf picker opens.

${BOLD}Examples${RESET}:
  ${GREEN}$script_name uninstall            ${RESET}Open fzf and select installed fonts
  ${GREEN}$script_name uninstall ${RESET}Meslo      Remove a specific font

EOF
}

# -------------------- Commands --------------------
show_version() {
  echo "Nerd Font Manager (nfm) v$VERSION"
}

list_fonts() {
  if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
    help_list
    exit 0
  fi
  [ -d "$fonts_dir" ] || die "No fonts directory found at: $fonts_dir."
  info "üìö Installed fonts in $fonts_dir:"
  find "$fonts_dir" -mindepth 1 -maxdepth 1 -type d -printf "‚Ä¢ ${GREEN}%f${RESET}\n"
}

load_installed_fonts() {
  mapfile -t installed_fonts < <(find "$fonts_dir" -mindepth 1 -maxdepth 1 -type d -printf "%f\n" 2>/dev/null || true)
}

install_fonts() {
  if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
    help_install
    return 0
  fi

  set_downloader
  load_installed_fonts
  declare -A is_installed=()
  for f in "${installed_fonts[@]:-}"; do
    [ -n "$f" ] || continue
    is_installed["$f"]=1
  done

  local selection
  if [ "$#" -gt 0 ]; then
    selection=$(printf "%s\n" "$@")
  else
    local candidates=()
    for f in "${available_fonts[@]}"; do
      [[ -n "${is_installed[$f]:-}" ]] || candidates+=("$f")
    done
    if [ ${#candidates[@]} -eq 0 ]; then
      info "‚úÖ Nothing to install. You're up to date"
      return 0
    fi
    selection=$(printf "%s\n" "${candidates[@]}" |
      fzf "${fzf_args[@]}" --header=$'‚¨áÔ∏è Nerd Fonts Installer\n[Tab] select, [Enter] confirm' ||
      true)
    [ -n "$selection" ] || {
      error "Aborting. No font selected"
      return 0
    }
  fi

  mkdir -p "$fonts_dir"
  local tmpdir
  tmpdir="$(mktemp -d)" || die "Cannot create temp dir"
  # no trap for mac-specific; we'll clean explicitly:
  for font_name in $selection; do
    [ -n "$font_name" ] || continue
    if [ -d "$fonts_dir/$font_name" ]; then
      info "‚è≠Ô∏è  $font_name is already installed. Skipping"
      continue
    fi
    info "üöÄ Installing $font_name Nerd Font..."
    local url zipfile
    url="https://github.com/ryanoasis/nerd-fonts/releases/latest/download/${font_name}.zip"
    zipfile="$tmpdir/$font_name.zip"

    info "‚¨áÔ∏è  Downloading $font_name.zip..."
    if ! downloader "$url" "$zipfile"; then
      warn "Failed to download ${font_name}.zip. Skipping..."
      echo
      continue
    fi

    info "üì¶ Unzipping to $fonts_dir/$font_name/"
    mkdir -p "$fonts_dir/$font_name"
    if ! unzip -q "$zipfile" -d "$fonts_dir/$font_name/"; then
      warn "Failed to unzip ${font_name}.zip. Skipping..."
      continue
    fi
    info "‚úÖ $font_name installed."
    echo
  done
  rm -rf "$tmpdir"

  info "üîÑ Refreshing font cache..."
  if command -v fc-cache >/dev/null 2>&1; then
    fc-cache -f >/dev/null || true
  else warn "'fc-cache' not found; you may need to refresh the cache manually"; fi
  info "üéâ Installation complete"
}

uninstall_fonts() {
  if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
    help_uninstall
    return 0
  fi

  [ -d "$fonts_dir" ] || die "No fonts directory found at: $fonts_dir"

  mapfile -t installed_fonts < <(find "$fonts_dir" -mindepth 1 -maxdepth 1 -type d -printf "%f\n")
  if [ ${#installed_fonts[@]} -eq 0 ]; then
    die "No installed fonts found in $fonts_dir"
  fi

  local selection
  if [ "$#" -gt 0 ]; then
    selection=$(printf "%s\n" "$@")
  else
    selection=$(printf "%s\n" "${installed_fonts[@]}" |
      fzf --multi --header=$'üóëÔ∏è Font Uninstaller\n[Tab] select, [Enter] confirm' ||
      true)
    [ -n "$selection" ] || {
      error "Aborting. No font selected"
      return 0
    }
  fi

  for font in $selection; do
    [ -n "$font" ] || continue
    if [ ! -d "$fonts_dir/$font" ]; then
      warn "$font is not installed. Skipping."
      continue
    fi
    info "üóëÔ∏è  Removing $font from $fonts_dir..."
    rm -rf "$fonts_dir/$font"
  done

  info "üîÑ Refreshing font cache..."
  if command -v fc-cache >/dev/null 2>&1; then fc-cache -f >/dev/null || true; fi
  info "‚úÖ Uninstallation complete"
}

# -------------------- Main --------------------
preflight_check

if [[ "${1:-}" == "-h" || "${1:-}" == "--help" || -z "${1:-}" ]]; then
  help_global
  exit 0
elif [[ "${1:-}" == "-v" || "${1:-}" == "--version" ]]; then
  show_version
  exit 0
fi

cmd="$1"
shift || true
case "$cmd" in
list | l) list_fonts "$@" ;;
install | i) install_fonts "$@" ;;
uninstall | u) uninstall_fonts "$@" ;;
*)
  error "Unknown command: $cmd"
  printf '\n' >&2
  printf '%b\n' "Use ${BOLD}${RED}$script_name -h${RESET} for usage information" >&2
  exit 2
  ;;
esac
