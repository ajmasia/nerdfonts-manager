#!/usr/bin/env bash

set -u

# Color support (for help output)
supports_color() {
  if [ -t 1 ]; then
    [ -z "${NO_COLOR:-}" ] || return 1
    if command -v tput >/dev/null 2>&1; then
      [ "$(tput colors 2>/dev/null || echo 0)" -ge 8 ] && return 0
    else
      return 0
    fi
  fi
  return 1
}

if supports_color; then
  if command -v tput >/dev/null 2>&1; then
    BOLD="$(tput bold)"
    DIM="$(tput dim 2>/dev/null || printf $'\e[2m')"
    RESET="$(tput sgr0)"
    CYAN="$(tput setaf 6)"
    GREEN="$(tput setaf 2)"
    YELLOW="$(tput setaf 3)"
    RED="$(tput setaf 1)"
  else
    BOLD=$'\e[1m'
    DIM=$'\e[2m'
    RESET=$'\e[0m'
    CYAN=$'\e[36m'
    GREEN=$'\e[32m'
    YELLOW=$'\e[33m'
    RED=$'\e[31m'
  fi
else
  BOLD=''
  DIM=''
  RESET=''
  CYAN=''
  GREEN=''
  YELLOW=''
  RED=''
fi

# Config
fzf_args=(
  --multi
  --header=$'üìù Nerd Font Manager\n[Tab] select multiple, [Enter] confirm'
)
fonts_dir="${NERDFONTS_DIR:-$HOME/.fonts}"

available_fonts=(
  "0xProto" "3270" "AdwaitaMono" "Agave" "AnonymousPro" "Arimo"
  "AtkinsonHyperlegibleMono" "AurulentSansMono" "BigBlueTerminal"
  "BitstreamVeraSansMono" "BlexMono" "CascadiaMono" "CascadiaCode"
  "CodeNewRoman" "ComicShannsMono" "CommitMono" "Cousine" "D2Coding"
  "DaddyTimeMono" "DejaVuSansMono" "DepartureMono" "DroidSansMono"
  "EnvyCodeR" "FantasqueSansMono" "FiraCode" "FiraMono" "GeistMono"
  "Go-Mono" "Gohu" "Hack" "Hasklig" "HeavyData" "Hermit" "iA-Writer"
  "Inconsolata" "InconsolataGo" "InconsolataLGC" "IntelOneMono"
  "Iosevka" "IosevkaTerm" "IosevkaTermSlab" "JetBrainsMono" "Lekton"
  "LiberationMono" "Lilex" "MartianMono" "Meslo" "Monaspace" "Monofur"
  "Monoid" "Mononoki" "MPlus" "Noto" "OpenDyslexic" "Overpass"
  "ProFont" "ProggyClean" "Recursive" "RobotoMono" "ShureTechMono"
  "SauceCodePro" "SpaceMono" "NerdFontsSymbolsOnly" "Terminus" "Tinos"
  "Ubuntu" "UbuntuMono" "UbuntuSans" "VictorMono" "ZedMono"
)

script_name="$(basename -- "${BASH_SOURCE[0]:-$0}")"

# Utils
die() {
  echo "‚ùå $*" >&2
  exit 1
}

require_cmd() { command -v "$1" >/dev/null 2>&1 || die "You need '$1' installed."; }

# Help functions
help_global() {
  cat <<EOF
${BOLD}${CYAN}Nerd Font Manager (nfm)${RESET}

${BOLD}Usage${RESET}:
  $script_name ${GREEN}<command>${RESET} [args]  ${DIM}(use -h for command help)${RESET}

${BOLD}Commands${RESET}:
  ${GREEN}list, l${RESET}                 List installed fonts
  ${GREEN}install, i${RESET} [FONT...]    Install fonts (interactive if none)
  ${GREEN}uninstall, u${RESET} [FONT...]  Uninstall fonts (interactive if none)

${BOLD}Global options${RESET}:
  ${GREEN}-h, --help${RESET}              Show this help

${BOLD}Notes${RESET}:
  ‚Ä¢ Fonts directory: \$NERDFONTS_DIR ${DIM}(default: ${HOME}/.fonts)${RESET}
  ‚Ä¢ Dependencies: fzf, unzip, and curl or wget to install; fc-cache to refresh cache

EOF
}

help_list() {
  cat <<EOF
${BOLD}${CYAN}Nerd Font Manager (nfm)${RESET}

${BOLD}Usage${RESET}: $script_name list
${DIM}List installed Nerd Fonts from $fonts_dir.${RESET}

EOF
}

help_install() {
  cat <<EOF
${BOLD}${CYAN}Nerd Font Manager (nfm)${RESET}

${BOLD}Usage${RESET}: $script_name install [FONT...]
Install one or more Nerd Fonts. If no FONT names are provided, an interactive fzf picker opens.

${BOLD}Examples${RESET}:
  ${GREEN}$script_name install                    ${RESET}Open fzf and select fonts
  ${GREEN}$script_name install ${RESET}FiraCode Meslo     Install specific fonts

EOF
}

help_uninstall() {
  cat <<EOF
${BOLD}${CYAN}Nerd Font Manager (nfm)${RESET}

${BOLD}Usage${RESET}: $script_name uninstall [FONT...]
Uninstall one or more Nerd Fonts. If no names are provided, an interactive fzf picker opens.

${BOLD}Examples${RESET}:
  ${GREEN}$script_name uninstall            ${RESET}Open fzf and select installed fonts
  ${GREEN}$script_name uninstall ${RESET}Meslo      Remove a specific font

EOF
}

# Commands
list_fonts() {
  if [ ! -d "$fonts_dir" ]; then
    echo "‚ùå No fonts directory found at: $fonts_dir."
    exit 1
  fi
  echo "üìö Installed fonts in $fonts_dir:"
  # GNU find uses -printf; on BSD/macOS you can replace with basename variant.
  find "$fonts_dir" -mindepth 1 -maxdepth 1 -type d -printf "‚Ä¢ ${GREEN}%f${RESET}\n"
}

load_installed_fonts() {
  mapfile -t installed_fonts < <(find "$fonts_dir" -mindepth 1 -maxdepth 1 -type d -printf "%f\n" 2>/dev/null || true)
}

install_fonts() {
  # subcommand-specific help
  if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
    help_install
    return 0
  fi
  shift 0

  require_cmd unzip
  if command -v curl >/dev/null 2>&1; then
    DL='curl -s -OL'
  elif command -v wget >/dev/null 2>&1; then
    DL='wget -q'
  else die "Neither 'curl' nor 'wget' is installed."; fi

  load_installed_fonts
  declare -A is_installed=()
  for f in "${installed_fonts[@]:-}"; do is_installed["$f"]=1; done

  local selection
  if [ "$#" -gt 0 ]; then
    selection=$(printf "%s\n" "$@")
  else
    local candidates=()
    for f in "${available_fonts[@]}"; do
      [[ -n "${is_installed[$f]:-}" ]] || candidates+=("$f")
    done
    if [ ${#candidates[@]} -eq 0 ]; then
      echo "‚úÖ Nothing to install. You're up to date"
      return 0
    fi
    require_cmd fzf
    selection=$(printf "%s\n" "${candidates[@]}" |
      fzf "${fzf_args[@]}" --header=$'‚¨áÔ∏è Nerd Fonts Installer\n[Tab] select, [Enter] confirm')
    [ -n "$selection" ] || {
      echo "Aborting. ${RED}No font selected${RESET}"
      return 0
    }
  fi

  mkdir -p "$fonts_dir"

  while IFS= read -r font_name; do
    [ -n "$font_name" ] || continue
    if [ -d "$fonts_dir/$font_name" ]; then
      echo "‚è≠Ô∏è  $font_name is already installed. Skipping"
      continue
    fi
    echo "üöÄ Installing $font_name Nerd Font..."
    echo "‚¨áÔ∏è  Downloading $font_name.zip..."
    if ! eval $DL "\"https://github.com/ryanoasis/nerd-fonts/releases/latest/download/${font_name}.zip\""; then
      echo "‚ö†Ô∏è  Failed to download ${font_name}.zip. Skipping..."
      continue
    fi
    echo "üì¶ Unzipping to $fonts_dir/$font_name/"
    mkdir -p "$fonts_dir/$font_name"
    if ! unzip -q "$font_name.zip" -d "$fonts_dir/$font_name/"; then
      echo "‚ö†Ô∏è  Failed to unzip ${font_name}.zip. Removing file..."
      rm -f "$font_name.zip"
      continue
    fi
    rm -f "$font_name.zip"
    echo "‚úÖ $font_name installed."
  done <<<"$selection"

  echo "üîÑ Refreshing font cache..."
  if command -v fc-cache >/dev/null 2>&1; then
    fc-cache -f >/dev/null || true
  else echo "‚ÑπÔ∏è 'fc-cache' not found; you may need to refresh the cache manually"; fi
  echo "üéâ Installation complete"
}

uninstall_fonts() {
  # subcommand-specific help
  if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
    help_uninstall
    return 0
  fi
  shift 0

  if [ ! -d "$fonts_dir" ]; then
    echo "‚ùå No fonts directory found at: $fonts_dir"
    exit 1
  fi

  mapfile -t installed_fonts < <(find "$fonts_dir" -mindepth 1 -maxdepth 1 -type d -printf "%f\n")
  if [ ${#installed_fonts[@]} -eq 0 ]; then
    echo "‚ùå No installed fonts found in $fonts_dir"
    exit 1
  fi

  local selection
  if [ "$#" -gt 0 ]; then
    selection=$(printf "%s\n" "$@")
  else
    require_cmd fzf
    selection=$(printf "%s\n" "${installed_fonts[@]}" |
      fzf --multi --header=$'üóëÔ∏è Font Uninstaller\n[Tab] select, [Enter] confirm')
    [ -n "$selection" ] || {
      echo "Aborting. ${RED}No font selected${RESET}"
      return 0
    }
  fi

  while IFS= read -r font; do
    [ -n "$font" ] || continue
    if [ ! -d "$fonts_dir/$font" ]; then
      echo "‚ö†Ô∏è  $font is not installed. Skipping."
      continue
    fi
    echo "üóëÔ∏è  Removing $font from $fonts_dir..."
    rm -rf "$fonts_dir/$font"
  done <<<"$selection"

  echo "üîÑ Refreshing font cache..."
  if command -v fc-cache >/dev/null 2>&1; then fc-cache -f >/dev/null || true; fi
  echo "‚úÖ Uninstallation complete"
}

# Parse command-line arguments
if [[ "${1:-}" == "-h" || "${1:-}" == "--help" || -z "${1:-}" ]]; then
  help_global
  exit 0
fi

cmd="$1"
shift

case "$cmd" in
list | l)
  if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
    help_list
    exit 0
  fi
  list_fonts
  ;;
install | i) install_fonts "$@" ;;
uninstall | u) uninstall_fonts "$@" ;;
*)
  echo "Unknown command: $cmd"
  echo
  echo "Use ${BOLD}${RED}$script_name --help${RESET} for usage information"
  exit 2
  ;;
esac
